New in 4.3

* The post-treatment view_generation is now functional for aevol (with or 
  without space), but not for R-aevol yet. This post-treatment is available
  if X was enabled at the "configure" step, which is the case by default.

* Lateral transfer by replacement can now be constrained to replace a segment
  of roughly the same size and sequence as the one given by the donor, to
  simulate allelic recombination. To use this kind of transfer by replacement
  rather than the usual one (where the donor and replaced segments only have
  similar sequences at their extremities), add the line
  "REPL_TRANSFER_WITH_CLOSE_POINTS true" in the param.in file. Specifically, a
  small region of high similarity is searched for between the donor chromosome
  and the receiving chromosome. Then this initial alignment is extended until
  there is no sequence similarity anymore or until a random event stops the
  extension -- at each extension step, there is a probability called
  REPL_TRANSFER_DETACH_RATE to stop the extension even if there is some
  sequence similarity. Below is an example of how to write the param.in file
  to try for a lateral transfer by replacement in 50% of the reproductions,
  with the constraint that the replaced segment must have roughly the same
  size and sequence as the donor segment (the last six parameters are for the
  alignment search):

    WITH_TRANSFER                     true
    TRANSFER_REPL_RATE                0.5
    REPL_TRANSFER_WITH_CLOSE_POINTS   true
    REPL_TRANSFER_DETACH_RATE         0.3
    NEIGHBOURHOOD_RATE                1e-1
    ALIGN_FUNCTION                    SIGMOID 0 40 
    ALIGN_W_ZONE_H_LEN                50
    ALIGN_MAX_SHIFT                   20
    ALIGN_MATCH_BONUS                 1
    ALIGN_MISMATCH_COST               2

* Lateral transfer events by insertion or replacement can be logged during the
  main evolutionary run by adding the line "LOG TRANSFER" in the param.in file.
  They will be written in an output file called log_transfer.out.


* Post-treatments lineage and ancstats can replay lateral transfer events.
  To simplify the post-treatments, lateral transfer events are treated as
  mutations and rearrangements. They are managed in ae_dna and ae_mutation
  and no more in ae_selection. If RECORD_TREE is set to true and if
  TREE_MODE is set to normal in param.in, the transfer events will be saved
  in the tree files with the transferred sequence. 

* Examples are now provided in the "examples" dir.


Changes in 4.3

* Replaced most of the --with-xxxxx configure script options with
  --enable-xxxxx. Supported options for the configure script are now [default
  value in brackets]:

     --with-x                          [yes]
     --enable-optim                    [enabled]
     --enable-raevol                   [disabled]
     --enable-normalized-fitness       [disabled]
     --enable-mtperiod=period          [disabled]
     --enable-trivialjumps=jumpsize    [disabled]
     --enable-devel                    [disabled]
     --enable-debug                    [disabled]
     --enable-in2p3                    [disabled]

* Post-treatment executables are installed into ${prefix}/bin rather than
  ${prefix}/libexec (we realized it wasn't a good idea after all...).


Bugs fixed in 4.3:

* Bug #289: Missing lines in the header of stats_bp_best.out

* Bug #293: Initialisation with a clonal population:
  Individuals in the first generation had a rank equal to -1.

* Bug #294: Problems in constructor and copy method of ae_vis_a_vis 

* Bug #300: Missing length data in the tree files for the rearrangements
  (NORMAL tree mode).

* aevol_create produced a segmentation fault if param.in did 
  not contain a line specifying ENV_AXIS_FEATURES. Now this parameter can be
  omitted, in which case the default value would be METABOLISM for the whole
  x-axis.

* Correction of the default value for the initialisation method, which was 0
  instead of "ONE_GOOD_GENE | CLONE".

* Correction of memory leaks in the constructor of ae_stats and in the
  destructor of ae_mutation for some mutations.

* Correction of a bug in the lineage post-treatment, which would fail after
  ~1.000 tree files were loaded because the files were never closed.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

New in 4.2

* Post-treatment executables are now prefixed with aevol_misc_ and are installed
  into ${prefix}/libexec rather than ${prefix}/bin


Bugs fixed in 4.2 

* Bugs #281 and #282: Bug in gene position

  This bug happenned whenever a promoter at the end of the genome on the LEADING
  strand transcribed a gene that was at the beginning of the genome (or a
  promoter at the beginning on the LAGGING strand transcribed a gene that was at
  the end of the genome)

  The position of the protein was then out of the genome bound
  (> genome len when LEADING or < 0 when LAGGING)
  If this gene was also transcribed on another rna that didn't satisfy the above
  constraint, it wasn't recognized as the same gene.

  Either bugs had no effect whatsoever on the fitness and hence on the outcome
  of evolution.
  It could however lead to erroneous statistics regarding the number of RNAs a
  gene is transcribed onto.

* Bug #284: Undefined behavior when there is no terminator in the genome

  After a big deletion, it can happen that a genetic unit does not contain any
  teminator anymore. There can however be a promoter somewhere. The behavior of
  the program was different depending on the strand where the promoter was. If
  it was on the lagging strand, the RNA was supposed to be as long as the whole
  genetic unit, and could carry coding sequences. If the promoter was on the
  leading strand, the length of the RNA was left as is, that is, either to -1
  for generation 0, or to the length  inherited from the parent, which made no
  sense anymore once the terminator has disappeared.

  We decided that it is best that no RNA is produced in this case
  (no terminator = incomplete gene, assumed to be non-functional).

* Bug #285: "Barrier" events logged twice

  When a deletion would cause the genetic unit to be smaller than the size of a
  promoter, the mutation was not performed and (if the BARRIER option was chosen
  in the logs), and the event was logged twice.
  This kind of mutations is now performed normally (and hence no log entry
  should be issued) as long as it doesn't make the genetic unit smaller than the
  minimum length specified (which is independent of the promoter size).


* Bug #286: Log files incorrectly regenerated when resuming a run

  When resuming a run, log files are regenerated by copying the header of the
  former log file and its entries until the generation chosen to resume the run.
  During this copy, (1) the first entry was skipped, and (2) the entries for the
  resuming generation were copied, and thus ended up duplicated.

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

New in 4.1

* Ported the "extract" post-treatment from version 3.
  This programs can extract from a backup the sequence and the list of all
  proteins for every individual in an easily parsable text-based format.

* aevol_modify allows to modify the axis features and segmentation as well as
  secretion properties

* Added man pages for the 4 main executables


Bugs fixed in 4.1

* Supressed memory leaks

* Introduced in 4.0: Major bias in the spatial competition caused by a bad
  update.

* In aevol_modify, changing environment gaussians was causing a segfault when
  NOT using environmental variations.

* Bug #279: make install no longer fails with error

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

New in 4.0

* The main aevol executable has been split into 4:
  - aevol_create:     create an experiment with setup as specified in param_file
  - aevol_run:        run a simulation
  - aevol_modify:     modify an experiment as specified in param_file
  - aevol_propagate:  create a fresh copy of the experiment
